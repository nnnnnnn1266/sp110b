#建立區塊語法
#1
{ puts "Hello, World!" } # Note the { braces }
#or
#2
do puts "Hello, World!" end

#傳參數的區塊使用閉包
# In an object instance variable (denoted with '@'), remember a block.
def remember(&a_block)
  @block = a_block
end

# Invoke the above method, giving it a block which takes a name.
remember {|name| puts "Hello, #{name}!"}

# When the time is right (for the object) -- call the closure!
@block.call("Jon")
# => "Hello, Jon!"

#從方法中返回閉包
def create_set_and_get(initial_value=0) # Note the default value of 0
  closure_value = initial_value
  return Proc.new {|x| closure_value = x}, Proc.new { puts closure_value }
end

setter, getter = create_set_and_get  # ie. returns two values
setter.call(21)
getter.call # => 21

#迭代呼叫呼叫時提供的區塊
def use_hello
  yield "hello"
end

# Invoke the above method, passing it a block.
use_hello {|string| puts string} # => 'hello'

#使用區塊迭代陣列
array = [1, 'hi', 3.14]
array.each { |item| puts item }
# => 1
# => 'hi'
# => 3.14

array.each_index { |index| puts "#{index}: #{array[index]}" }
# => 0: 1
# => 1: 'hi'
# => 2: 3.14

(3..6).each { |num| puts num }
# => 3
# => 4
# => 5
# => 6
